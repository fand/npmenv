#!/usr/bin/env bash

NPMENV_VERSION="20151028"

set -E
exec 3<&2 # preserve original stderr at fd 3


lib() {
  parse_options() {
    OPTIONS=()
    ARGUMENTS=()
    local arg option index

    for arg in "$@"; do
      if [ "${arg:0:1}" = "-" ]; then
        if [ "${arg:1:1}" = "-" ]; then
          OPTIONS[${#OPTIONS[*]}]="${arg:2}"
        else
          index=1
          while option="${arg:$index:1}"; do
            [ -n "$option" ] || break
            OPTIONS[${#OPTIONS[*]}]="$option"
            index=$(($index+1))
          done
        fi
      else
        ARGUMENTS[${#ARGUMENTS[*]}]="$arg"
      fi
    done
  }

  if [ "$1" == "--$FUNCNAME" ]; then
    declare -f "$FUNCNAME"
    echo "$FUNCNAME \"\$1\";"
    exit
  fi
}
lib "$1"


resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

capitalize() {
  printf "%s" "$1" | tr a-z A-Z
}

sanitize() {
  printf "%s" "$1" | sed "s/[^A-Za-z0-9.-]/_/g; s/__*/_/g"
}

build_failed() {
  { echo
    echo "BUILD FAILED"
    echo

    if ! rmdir "${BUILD_PATH}" 2>/dev/null; then
      echo "Inspect or clean up the working tree at ${BUILD_PATH}"

      if file_is_not_empty "$LOG_PATH"; then
        echo "Results logged to ${LOG_PATH}"
        echo
        echo "Last 10 log lines:"
        tail -n 10 "$LOG_PATH"
      fi
    fi
  } >&3
  exit 1
}

file_is_not_empty() {
  local filename="$1"
  local line_count="$(wc -l "$filename" 2>/dev/null || true)"

  if [ -n "$line_count" ]; then
    words=( $line_count )
    [ "${words[0]}" -gt 0 ]
  else
    return 1
  fi
}

compute_sha1() {
  local output
  if type shasum &>/dev/null; then
    output="$(shasum -a 1 -b)" || return 1
    echo "${output% *}"
  elif type openssl &>/dev/null; then
    local openssl="$(command -v "$(brew --prefix openssl 2>/dev/null || true)"/bin/openssl openssl | head -1)"
    output="$("$openssl" dgst -sha1 2>/dev/null)" || return 1
    echo "${output##* }"
  elif type sha1sum &>/dev/null; then
    output="$(sha1sum --quiet)" || return 1
    echo "${output% *}"
  else
    return 1
  fi
}

http() {
  local method="$1"
  local url="$2"
  local file="$3"
  [ -n "$url" ] || return 1

  if type curl &>/dev/null; then
    "http_${method}_curl" "$url" "$file"
  elif type wget &>/dev/null; then
    "http_${method}_wget" "$url" "$file"
  else
    echo "error: please install \`curl\` or \`wget\` and try again" >&2
    exit 1
  fi
}

http_head_curl() {
  curl -qsILf "$1" >&4 2>&1
}

http_get_curl() {
  curl -C - -o "${2:--}" -qsSLf "$1"
}

http_head_wget() {
  wget -q --spider "$1" >&4 2>&1
}

http_get_wget() {
  wget -nv -c -O "${2:--}" "$1"
}

fix_directory_permissions() {
  # Ensure installed directories are not world-writable to avoid Bundler warnings
  find "$PREFIX_PATH" -type d \( -perm -020 -o -perm -002 \) -exec chmod go-w {} \;
}

version() {
  echo "npmenv ${NPMENV_VERSION}"
}

usage() {
  { version
    echo "usage: npmenv [-k|--keep] [-v|--verbose] definition prefix"
    echo "       npmenv --definitions"
  } >&2

  if [ -z "$1" ]; then
    exit 1
  fi
}

list_definitions() {
  npm info npm versions | egrep -o "\d[^']+"
}

get_version() {
  local PATTERN=$1
  echo "$PATTERN" | sed -e "s/^[^\.]\{1,\}\-//"
}

normalize_version() {
  local PATTERN=$1
  local PREFIX="$PATTERN"
  local VERSION=$(get_version "$PATTERN")
  if echo "$VERSION" | grep -v '^v' &>/dev/null ; then
    VERSION=v$VERSION
  fi

  if [ ${#PREFIX} -ne 0 ]; then
    echo "${PREFIX}-${VERSION}"
  else
    echo "${VERSION}"
  fi
}

ls_remote() {
  local PATTERN=$1
  local VERSIONS
  if [ "$PATTERN" ]; then
    PATTERN="$(normalize_version "$PATTERN")"
  else
    PATTERN=".*"
  fi
  VERSIONS=$(list_definitions "$PATTERN" | egrep -w "^${PATTERN}")
  if [ ! "$VERSIONS" ]; then
    echo "N/A"
    return
  fi
  echo "$VERSIONS"
  return
}

remote_version() {
  local PATTERN=$1
  local VERSION=$(ls_remote "$PATTERN" | tail -n1)
  echo "$VERSION"

  if [ "$VERSION" = 'N/A' ]; then
    return 1
  fi
}

install_npm() {
  local VERSION="$1"

  echo '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>';
  echo $NPMENV_ROOT;
  echo '@@@@@@@@@@@@@@@@@@@@@@@@@';
}

do_install() {
  local PATTERN="$1"
  local NORMALIZED_PATTERN="$(normalize_version "$PATTERN")"
  local DIST="$(get_version_prefix "$NORMALIZED_PATTERN")"
  local VERSION="$(get_version "$NORMALIZED_PATTERN")"

  install_npm "$VERSION"
}


unset VERBOSE
unset KEEP_BUILD_PATH
NPMENV_ROOT="$(abs_dirname "$0")/.."

parse_options "$@"

for option in "${OPTIONS[@]}"; do
  case "$option" in
  "h" | "help" )
    usage without_exiting
    { echo
      echo "  -k/--keep        Do not remove source tree after installation"
      echo "  -v/--verbose     Verbose mode: print compilation status to stdout"
      echo "  --definitions    List all built-in definitions"
      echo
    } >&2
    exit 0
    ;;
  "definitions" )
    list_definitions
    exit 0
    ;;
  "k" | "keep" )
    KEEP_BUILD_PATH=true
    ;;
  "v" | "verbose" )
    VERBOSE=true
    ;;
  "version" )
    version
    exit 0
    ;;
  esac
done

NODE_VERSION=$(remote_version "${ARGUMENTS[0]}") || {
  echo "The specified version is not available."
  echo "Run ndenv install -l or npmenv --definitions"
  echo "to show available versions of node.js/io.js."
  exit 1
}

PREFIX_PATH="${ARGUMENTS[1]}"
if [ -z "$PREFIX_PATH" ]; then
  usage
fi

if [ -z "$TMPDIR" ]; then
  TMP="/tmp"
else
  TMP="${TMPDIR%/}"
fi

if [ -z "$MAKE" ]; then
  export MAKE="make"
fi

if [ -n "$NPMENV_CACHE_PATH" ] && [ -d "$NPMENV_CACHE_PATH" ]; then
  NPMENV_CACHE_PATH="${NPMENV_CACHE_PATH%/}"
else
  unset NPMENV_CACHE_PATH
fi

if echo test | compute_sha1 >/dev/null; then
  HAS_SHA1_SUPPORT=1
else
  unset HAS_SHA1_SUPPORT
fi

if echo test | compute_sha2 >/dev/null; then
  HAS_SHA2_SUPPORT=1
else
  unset HAS_SHA2_SUPPORT
fi

SEED="$(date "+%Y%m%d%H%M%S").$$"
LOG_PATH="${TMP}/npmenv.${SEED}.log"
NODE_BIN="${PREFIX_PATH}/bin/node"
CWD="$(pwd)"

if [ -z "$NPMENV_BUILD_PATH" ]; then
  BUILD_PATH="${TMP}/npmenv.${SEED}"
else
  BUILD_PATH="$NPMENV_BUILD_PATH"
fi

exec 4<> "$LOG_PATH" # open the log file at fd 4
if [ -n "$VERBOSE" ]; then
  tail -f "$LOG_PATH" &
  TAIL_PID=$!
  trap "kill $TAIL_PID" SIGINT SIGTERM EXIT
fi

export LDFLAGS="-L'${PREFIX_PATH}/lib' ${LDFLAGS}"
export CPPFLAGS="-I'${PREFIX_PATH}/include' ${CPPFLAGS}"

unset NODEOPT
unset NODELIB

trap build_failed ERR
mkdir -p "$BUILD_PATH"
#source "$DEFINITION_PATH"
do_install "$NODE_VERSION"
[ -z "${KEEP_BUILD_PATH}" ] && rm -fr "$BUILD_PATH"
trap - ERR
